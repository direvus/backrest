<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc title="PgBackRest" subtitle="Simple Postgres Backup &amp; Restore">
	<intro>
		<text><backrest/> aims to be a simple backup and restore system that can seamlessly scale up to the largest databases and workloads.

		Primary <backrest/> features:
		<ul>
			<li>Local or remote backup</li>
			<li>Multi-threaded backup/restore for performance</li>
			<li>Checksums</li>
			<li>Safe backups (checks that logs required for consistency are present before backup completes)</li>
			<li>Full, differential, and incremental backups</li>
			<li>Backup rotation (and minimum retention rules with optional separate retention for archive)</li>
			<li>In-stream compression/decompression</li>
			<li>Archiving and retrieval of logs for replicas/restores built in</li>
			<li>Async archiving for very busy systems (including space limits)</li>
			<li>Backup directories are consistent Postgres clusters (when hardlinks are on and compression is off)</li>
			<li>Tablespace support</li>
			<li>Restore delta option</li>
			<li>Restore using timestamp/size or checksum</li>
			<li>Restore remapping base/tablespaces</li>
		</ul>
		Instead of relying on traditional backup tools like tar and rsync, <backrest/> implements all backup features internally and uses a custom protocol for communicating with remote systems.  Removing reliance on tar and rsync allows for better solutions to database-specific backup issues.  The custom remote protocol limits the types of connections that are required to perform a backup which increases security.</text>
	</intro>

	<install title="Install">
		<text><backrest/> is written entirely in Perl and uses some non-standard modules that must be installed from CPAN.</text>

		<install-system-list>
			<install-system title="Ubuntu 12.04">
				<text>* Starting from a clean install, update the OS:
					<code-block>
						apt-get update
						apt-get upgrade (reboot if required)
					</code-block>
					* Install ssh, git and cpanminus:
					<code-block>
						apt-get install ssh
						apt-get install git
						apt-get install cpanminus
					</code-block>
					* Install Postgres (instructions from http://www.postgresql.org/download/linux/ubuntu/)

					Create the file /etc/apt/sources.list.d/pgdg.list, and add a line for the repository:
					<code-block>
						deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main
					</code-block>
					* Then run the following:
					<code-block>
						wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
						sudo apt-get update

						apt-get install postgresql-9.3
						apt-get install postgresql-server-dev-9.3
					</code-block>
					* Install required Perl modules:
					<code-block>
						cpanm JSON::PP
						cpanm Net::OpenSSH
						cpanm IPC::System::Simple
						cpanm Digest::SHA
						cpanm Compress::Zlib
						cpanm threads (update this package)
						cpanm Thread::Queue (update this package)
					</code-block>
					* Install PgBackRest

					<backrest/> can be installed by downloading the most recent release:

					https://github.com/pgmasters/backrest/releases

					<backrest/> can be installed anywhere but it's best (though not required) to install it in the same location on all systems.</text>
			</install-system>
		</install-system-list>
	</install>

	<operation title="Operation">
		<operation-general title="General Options">
			<text>These options are either global or used by all commands.</text>

			<option-list>
				<!-- OPERATION - GENERAL - CONFIG OPTION -->
				<option id="config">
					<text>By default <backrest/> expects the its configuration file to be located at `/etc/pg_backrest.conf`.  Use this option to specify another location.</text>
					<example>/var/lib/backrest/pg_backrest.conf</example>
				</option>

				<!-- OPERATION - GENERAL - STANZA OPTION -->
				<option id="stanza">
					<text>Defines the stanza for the command.  A stanza is the configuration for a database that defines where it is located, how it will be backed up, archiving options, etc.  Most db servers will only have one Postgres cluster and therefore one stanza, whereas backup servers will have a stanza for every database that needs to be backed up.

Examples of how to configure a stanza can be found in the `configuration examples` section.</text>
					<example>main</example>
				</option>

				<!-- OPERATION - GENERAL - HELP OPTION -->
				<option id="help">
					<text>Displays the <backrest/> help.</text>
				</option>

				<!-- OPERATION - GENERAL - VERSION OPTION -->
				<option id="version">
					<text>Displays the <backrest/> version.</text>
				</option>
			</option-list>
		</operation-general>

		<command-list title="Commands">
			<!-- OPERATION - BACKUP COMMAND -->
			<command id="backup">
				<text>Perform a database backup.  <backrest/> does not have a built-in scheduler so it's best to run it from cron or some other scheduling mechanism.</text>

				<option-list>
					<!-- OPERATION - BACKUP COMMAND - TYPE OPTION -->
					<option id="type">
						<text>The following backup types are supported:
							<ul>
								<li><id>full</id> - all database files will be copied and there will be no dependencies on previous backups.</li>
								<li><id>incr</id> - incremental from the last successful backup.</li>
								<li><id>diff</id> - like an incremental backup but always based on the last full backup.</li>
							</ul></text>
						<example>full</example>
					</option>

					<!-- OPERATION - BACKUP COMMAND - NO-START-STOP OPTION -->
					<option id="no-start-stop">
						<text>This option prevents <backrest/> from running <code>pg_start_backup()</code> and <code>pg_stop_backup()</code> on the database.  In order for this to work <postgres/> should be shut down and <backrest/> will generate an error if it is not.

							The purpose of this option is to allow cold backups.  The <path>pg_xlog</path> directory is copied as-is and <setting>archive-check</setting> is automatically disabled for the backup.</text>
					</option>

					<!-- OPERATION - BACKUP COMMAND - FORCE OPTION -->
					<option id="force">
						<text>When used with  <param>--no-start-stop</param> a backup will be run even if <backrest/> thinks that <postgres/> is running.  <b>This option should be used with extreme care as it will likely result in a bad backup.</b>

							There are some scenarios where a backup might still be desirable under these conditions.  For example, if a server crashes and the database volume can only be mounted read-only, it would be a good idea to take a backup even if <file>postmaster.pid</file> is present.  In this case it would be better to revert to the prior backup and replay WAL, but possibly there is a very important transaction in a WAL segment that did not get archived.</text>
					</option>
				</option-list>

				<command-example-list>
					<command-example title="Full Backup">
						<text><code-block>
/path/to/pg_backrest.pl --stanza=db --type=full backup
</code-block>
Run a <id>full</id> backup on the <id>db</id> stanza.  <param>--type</param> can also be set to <id>incr</id> or <id>diff</id> for incremental or differential backups.  However, if no <id>full</id> backup exists then a <id>full</id> backup will be forced even if <id>incr</id> or <id>diff</id> is requested.</text>
					</command-example>
				</command-example-list>
			</command>

			<!-- OPERATION - ARCHIVE-PUSH COMMAND -->
			<command id="archive-push">
				<text>Archive a WAL segment to the repository.</text>

				<command-example-list>
					<command-example>
						<text><code-block>
								/path/to/pg_backrest.pl --stanza=db archive-push %p
							</code-block>
							Accepts a WAL segment from <postgres/> and archives it in the repository.  <param>%p</param> is how <postgres/> specifies the location of the WAL segment to be archived.</text>
					</command-example>
				</command-example-list>
			</command>

			<!-- OPERATION - ARCHIVE-GET COMMAND -->
			<command id="archive-get">
				<text>Get a WAL segment from the repository.</text>

				<command-example-list>
					<command-example>
						<text><code-block>
								/path/to/pg_backrest.pl --stanza=db archive-get %f %p
							</code-block>
							Retrieves a WAL segment from the repository.  This command is used in <file>restore.conf</file> to restore a backup, perform PITR, or as an alternative to streaming for keeping a replica up to date.  <param>%f</param> is how <postgres/> specifies the WAL segment it needs and <param>%p</param> is the location where it should be copied.</text>
					</command-example>
				</command-example-list>
			</command>

			<!-- OPERATION - EXPIRE COMMAND -->
			<command id="expire">
				<text><backrest/> does backup rotation, but is not concerned with when the backups were created.  So if two full backups are configured for rentention, <backrest/> will keep two full backups no matter whether they occur, two hours apart or two weeks apart.</text>

				<command-example-list>
					<command-example>
						<text><code-block>
								/path/to/pg_backrest.pl --stanza=db expire
							</code-block>
							Expire (rotate) any backups that exceed the defined retention.  Expiration is run automatically after every successful backup, so there is no need to run this command separately unless you have reduced rentention, usually to free up some space.</text>
					</command-example>
				</command-example-list>
			</command>

			<!-- OPERATION - RESTORE COMMAND -->
			<command id="restore">
				<text>Perform a database restore.  This command is generall run manually, but there are instances where it might be automated.</text>
				<option-list>
					<!-- OPERATION - RESTORE COMMAND - SET OPTION -->
					<option id="set">
						<text>The backup set to be restored.  <id>latest</id> will restore the latest backup, otherwise provide the name of the backup to restore.</text>
						<example>20150131-153358F_20150131-153401I</example>
					</option>

					<!-- OPERATION - RESTORE COMMAND - DELTA OPTION -->
					<option id="delta">
						<text>By default the <postgres/> data and tablespace directories are expected to be present but empty.  This option performs a delta restore using checksums.</text>
					</option>

					<!-- OPERATION - RESTORE COMMAND - FORCE OPTION -->
					<option id="force">
						<text>By itself this option forces the <postgres/> data and tablespace paths to be completely overwritten.  In combination with <param>--delta</param> a timestamp/size delta will be performed instead of using checksums.</text>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TYPE OPTION -->
					<option id="type">
						<text>The following recovery types are supported:
							<ul>
								<li><id>default</id> - recover to the end of the archive stream.</li>
								<li><id>name</id> - recover the restore point specified in <param>--target</param>.</li>
								<li><id>xid</id> - recover to the transaction id specified in <param>--target</param>.</li>
								<li><id>time</id> - recover to the time specified in <param>--target</param>.</li>
								<li><id>preserve</id> - preserve the existing <file>recovery.conf</file> file.</li>
								<li><id>none</id> - no <file>recovery.conf</file> file is written so <postgres/> will attempt to achieve consistency using WAL segments present in <path>pg_xlog</path>.  Provide the required WAL segments or use the <setting>archive-copy</setting> setting to include them with the backup.</li>
							</ul></text>
						<example>xid</example>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TARGET OPTION -->
					<option id="target">
						<text>Defines the recovery target when <param>--type</param> is <id>name</id>, <id>xid</id>, or <id>time</id>.</text>
						<example>2015-01-30 14:15:11 EST</example>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TARGET-EXCLUSIVE OPTION -->
					<option id="target-exclusive">
						<text>Defines whether recovery to the target would be exclusive (the default is inclusive) and is only valid when <param>--type</param> is <id>time</id> or <id>xid</id>.  For example, using <param>--target-exclusive</param> would exclude the contents of transaction <id>1007</id> when <param>--type=xid</param> and <param>--target=1007</param>.  See <param>recovery_target_inclusive</param> option in the <postgres/> docs for more information.</text>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TARGET-RESUME OPTION -->
					<option id="target-resume">
						<text>Specifies whether recovery should resume when the recovery target is reached.  See <setting>pause_at_recovery_target</setting> in the <postgres/> docs for more information.</text>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TARGET-TIMELINE OPTION -->
					<option id="target-timeline">
						<text>Recovers along the specified timeline.  See <setting>recovery_target_timeline</setting> in the <postgres/> docs for more information.</text>
						<example>3</example>
					</option>

					<!-- OPERATION - RESTORE COMMAND - RECOVERY-SETTING OPTION -->
					<option id="recovery-setting">
						<text>Recovery settings in restore.conf options can be specified with this option.  See http://www.postgresql.org/docs/X.X/static/recovery-config.html for details on restore.conf options (replace X.X with your database version).  This option can be used multiple times.

							Note: <setting>restore_command</setting> will be automatically generated but can be overridden with this option.  Be careful about specifying your own <setting>restore_command</setting> as <backrest/> is designed to handle this for you.  Target Recovery options (recovery_target_name, recovery_target_time, etc.) are generated automatically by <backrest/> and should not be set with this option.

							Recovery settings can also be set in the <setting>restore:recovery-setting</setting> section of pg_backrest.conf.  For example:
							<code-block>
								[restore:recovery-setting]
								primary_conn_info=db.mydomain.com
								standby_mode=on
							</code-block>
							Since <backrest/> does not start <postgres/> after writing the <file>recovery.conf</file> file, it is always possible to edit/check <file>recovery.conf</file> before manually restarting.</text>
						<example>primary_conninfo=db.mydomain.com</example>
					</option>

					<!-- OPERATION - RESTORE COMMAND - TABLESPACE-MAP OPTION -->
					<option id="tablespace-map">
						<text>Moves a tablespace to a new location during the restore.  This is useful when tablespace locations are not the same on a replica, or an upgraded system has different mount points.

							Since <postgres/> 9.2 tablespace locations are not stored in pg_tablespace so moving tablespaces can be done with impunity.  However, moving a tablespace to the <setting>data_directory</setting> is not recommended and may cause problems.  For more information on moving tablespaces http://www.databasesoup.com/2013/11/moving-tablespaces.html is a good resource.</text>
						<example>ts_01=/db/ts_01</example>
					</option>
				</option-list>

				<command-example-list>
					<command-example title="Restore Latest">
						<text><code-block>
									/path/to/pg_backrest.pl --stanza=db --type=name --target=release restore
							</code-block>
							Restores the latest database backup and then recovers to the <id>release</id> restore point.</text>
					</command-example>
				</command-example-list>
			</command>
		</command-list>
	</operation>

	<config title="Configuration">
		<text><backrest/> can be used entirely with command-line parameters but a configuration file is more practical for installations that are complex or set a lot of options. The default location for the configuration file is <file>/etc/pg_backrest.conf</file>.</text>

		<config-example-list title="Examples">
			<config-example title="Confguring Postgres for Archiving">
				<text>Modify the following settings in <file>postgresql.conf</file>:
					<code-block>
						wal_level = archive
						archive_mode = on
						archive_command = '/path/to/backrest/bin/pg_backrest.pl --stanza=db archive-push %p'
					</code-block>
					Replace the path with the actual location where <backrest/> was installed.  The stanza parameter should be changed to the actual stanza name for your database.
				</text>
			</config-example>

			<config-example title="Minimal Configuration">
				<text>The absolute minimum required to run <backrest/> (if all defaults are accepted) is the database path.

					<file>/etc/pg_backrest.conf</file>:
					<code-block>
						[main]
						db-path=/data/db
					</code-block>
						The <setting>db-path</setting> option could also be provided on the command line, but it's best to use a configuration file as options tend to pile up quickly.</text>
			</config-example>

			<config-example title="Simple Single Host Configuration">
				<text>This configuration is appropriate for a small installation where backups are being made locally or to a remote file system that is mounted locally.  A number of additional options are set:
					<ul>
						<li><setting>cmd-psql</setting> - Custom location and parameters for psql.</li>
						<li><setting>cmd-psql-option</setting> - Options for psql can be set per stanza.</li>
						<li><setting>compress</setting> - Disable compression (handy if the file system is already compressed).</li>
						<li><setting>repo-path</setting> - Path to the <backrest/> repository where backups and WAL archive are stored.</li>
						<li><setting>log-level-file</setting> - Set the file log level to debug (Lots of extra info if something is not working as expected).</li>
						<li><setting>hardlink</setting> - Create hardlinks between backups (but never between full backups).</li>
						<li><setting>thread-max</setting> - Use 2 threads for backup/restore operations.</li>
					</ul>
					<file>/etc/pg_backrest.conf</file>:
					<code-block>
						[global:command]
						cmd-psql=/usr/local/bin/psql -X %option%

						[global:general]
						compress=n
						repo-path=/Users/dsteele/Documents/Code/backrest/test/test/backrest

						[global:log]
						log-level-file=debug

						[global:backup]
						hardlink=y
						thread-max=2

						[main]
						db-path=/data/db

						[main:command]
						cmd-psql-option=--port=5433
					</code-block>
				</text>
			</config-example>

				<config-example title="Simple Multiple Host Configuration">
					<text>This configuration is appropriate for a small installation where backups are being made remotely.  Make sure that postgres@db-host has trusted ssh to backrest@backup-host and vice versa.  This configuration assumes that you have pg_backrest_remote.pl and pg_backrest.pl in the same path on both servers.

						<file>/etc/pg_backrest.conf</file> on the db host:
						<code-block>
							[global:general]
							repo-path=/path/to/db/repo
							repo-remote-path=/path/to/backup/repo

							[global:backup]
							backup-host=backup.mydomain.com
							backup-user=backrest

							[global:archive]
							archive-async=y

							[main]
							db-path=/data/db
						</code-block>
						<file>/etc/pg_backrest.conf</file> on the backup host:
						<code-block>
							[global:general]
							repo-path=/path/to/backup/repo

							[main]
							db-host=db.mydomain.com
							db-path=/data/db
							db-user=postgres
						</code-block>
				</text>
			</config-example>
		</config-example-list>

		<config-section-list title="Options">
			<!-- CONFIG - COMMAND SECTION -->
			<config-section id="command">
				<text>The <setting>command</setting> section defines the location of external commands that are used by <backrest/>.</text>

				<config-key-list>
					<!-- CONFIG - COMMAND SECTION - CMD-PSQL KEY -->
					<config-key id="cmd-psql">
						<text>Defines the full path to <cmd>psql</cmd>.  <cmd>psql</cmd> is used to call <code>pg_start_backup()</code> and <code>pg_stop_backup()</code>.

		If addtional per stanza parameters need to be passed to <cmd>psql</cmd> (such as <param>--port</param> or <param>--cluster</param>) then add <param>%option%</param> to the command line and use <setting>command-option::psql</setting> to set options.</text>

						<example>/usr/bin/psql -X %option%</example>
					</config-key>

					<!-- CONFIG - COMMAND SECTION - CMD-PSQL-OPTION KEY -->
					<config-key id="cmd-psql-option">
						<text>Allows per stanza command line parameters to be passed to <cmd>psql</cmd>.</text>

						<example>--port=5433</example>
					</config-key>

					<!-- CONFIG - COMMAND SECTION - CMD-REMOTE KEY -->
					<config-key id="cmd-remote">
						<text>Defines the location of <cmd>pg_backrest_remote.pl</cmd>.

							Required only if the path to <cmd>pg_backrest_remote.pl</cmd> is different on the local and remote systems.  If not defined, the remote path will be assumed to be the same as the local path.</text>

						<default>same as local</default>
						<example>/usr/lib/backrest/bin/pg_backrest_remote.pl</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - LOG -->
			<config-section id="log">
				<text>The <setting>log</setting> section defines logging-related settings.  The following log levels are supported:
				<ul>
					<li><id>off</id> - No logging at all (not recommended)</li>
					<li><id>error</id> - Log only errors</li>
					<li><id>warn</id> - Log warnings and errors</li>
					<li><id>info</id> - Log info, warnings, and errors</li>
					<li><id>debug</id> - Log debug, info, warnings, and errors</li>
					<li><id>trace</id> - Log trace (very verbose debugging), debug, info, warnings, and errors</li>
				</ul></text>

				<!-- CONFIG - LOG SECTION - LEVEL-FILE KEY -->
				<config-key-list>
					<config-key id="log-level-file">
						<text>Sets file log level.</text>

						<example>debug</example>
					</config-key>

					<!-- CONFIG - LOG SECTION - LEVEL-CONSOLE KEY -->
					<config-key id="log-level-console">
						<text>Sets console log level.</text>

						<example>error</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - GENERAL -->
			<config-section id="general">
				<text>The <setting>general</setting> section defines settings that are shared between multiple operations.</text>

				<!-- CONFIG - GENERAL SECTION - BUFFER-SIZE KEY -->
				<config-key-list>
					<config-key id="buffer-size">
						<text>Set the buffer size used for copy, compress, and uncompress functions.  A maximum of 3 buffers will be in use at a time per thread.  An additional maximum of 256K per thread may be used for zlib buffers.</text>

						<allow>16384 - 8388608</allow>
						<example>32768</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - COMPRESS -->
					<config-key id="compress">
						<text>Enable gzip compression.  Backup files are compatible with command-line gzip tools.</text>

						<example>n</example>
					</config-key>

					<!-- CONFIG - GENERAL SECTION - COMPRESS-LEVEL KEY -->
					<config-key id="compress-level">
						<text>Sets the zlib level to be used for file compression when <setting>compress=y</setting>.</text>

						<allow>0-9</allow>
						<example>9</example>
					</config-key>

					<!-- CONFIG - GENERAL SECTION - COMPRESS-LEVEL-NETWORK KEY -->
					<config-key id="compress-level-network">
						<text>Sets the zlib level to be used for protocol compression when <setting>compress=n</setting> and the database is not on the same host as the backup.  Protocol compression is used to reduce network traffic but can be disabled by setting <setting>compress-level-network=0</setting>.  When <setting>compress=y</setting> the <setting>compress-level-network</setting> setting is ignored and <setting>compress-level</setting> is used instead so that the file is only compressed once.  SSH compression is always disabled.</text>

						<allow>0-9</allow>
						<example>1</example>
					</config-key>

					<!-- CONFIG - GENERAL SECTION - REPO-PATH KEY -->
					<config-key id="repo-path">
						<text>Path to the backrest repository where WAL segments, backups, logs, etc are stored.</text>

						<example>/data/db/backrest</example>
					</config-key>

					<!-- CONFIG - GENERAL SECTION - REPO-REMOTE-PATH KEY -->
					<config-key id="repo-remote-path">
						<text>Path to the remote backrest repository where WAL segments, backups, logs, etc are stored.</text>

						<example>/backup/backrest</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - BACKUP -->
			<config-section id="backup">
				<text>The <setting>backup</setting> section defines settings related to backup.</text>

				<!-- CONFIG - BACKUP SECTION - HOST KEY -->
				<config-key-list>
					<config-key id="backup-host">
						<text>Sets the backup host when backup up remotely via SSH.  Make sure that trusted SSH authentication is configured between the db host and the backup host.

						When backing up to a locally mounted network filesystem this setting is not required.</text>

						<example>backup.domain.com</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - USER KEY -->
					<config-key id="backup-user">
						<text>Sets user account on the backup host.</text>

						<example>backrest</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - START-FAST -->
					<config-key id="start-fast">
						<text>Forces a checkpoint (by passing <id>true</id> to the <id>fast</id> parameter of <code>pg_start_backup()</code>) so the backup begins immediately.</text>

						<example>y</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - HARDLINK -->
					<config-key id="hardlink">
						<text>Enable hard-linking of files in differential and incremental backups to their full backups.  This gives the appearance that each backup is a full backup.  Be careful, though, because modifying files that are hard-linked can affect all the backups in the set.</text>

						<example>y</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - MANIFEST-SAVE-THRESHOLD -->
					<config-key id="manifest-save-threshold">
						<text>Defines how often the manifest will be saved during a backup (in bytes).  Saving the manifest is important because it stores the checksums and allows the resume function to work efficiently.  The actual threshold used is 1% of the backup size or <setting>manifest-save-threshold</setting>, whichever is greater.</text>

						<example>5368709120</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - RESUME -->
					<config-key id="resume">
						<text>Defines whether the resume feature is enabled.  Resume can greatly reduce the amount of time required to run a backup after a previous backup of the same type has failed.  It adds complexity, however, so it may be desirable to disable in environments that do not require the feature.</text>
						<example>false</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - THEAD-MAX -->
					<config-key id="thread-max">
						<text>Defines the number of threads to use for backup or restore.  Each thread will perform compression and transfer to make the backup run faster, but don't set <setting>thread-max</setting> so high that it impacts database performance during backup.</text>
						<example>4</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - THEAD-TIMEOUT -->
					<config-key id="thread-timeout">
						<text>Maximum amount of time (in seconds) that a backup thread should run.  This limits the amount of time that a thread might be stuck due to unforeseen issues during the backup.  Has no affect when <setting>thread-max=1</setting>.</text>

						<example>3600</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - ARCHIVE-CHECK -->
					<config-key id="archive-check">
						<text>Checks that all WAL segments required to make the backup consistent are present in the WAL archive.  It's a good idea to leave this as the default unless you are using another method for archiving.</text>

						<example>n</example>
					</config-key>

					<!-- CONFIG - BACKUP SECTION - ARCHIVE-COPY -->
					<config-key id="archive-copy">
						<text>Store WAL segments required to make the backup consistent in the backup's pg_xlog path.  This slightly paranoid option protects against corruption or premature expiration in the WAL segment archive.  PITR won't be possible without the WAL segment archive and this option also consumes more space.

							Even though WAL segments will be restored with the backup, <postgres/> will ignore them if a <file>recovery.conf</file> file exists and instead use <setting>archive_command</setting> to fetch WAL segments.  Specifying <setting>type=none</setting> when restoring will not create <file>recovery.conf</file> and force <postgres/> to use the WAL segments in pg_xlog.  This will get the database to a consistent state.</text>

						<example>y</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - ARCHIVE -->
			<config-section id="archive">
				<text>The <setting>archive</setting> section defines parameters when doing async archiving.  This means that the archive files will be stored locally, then a background process will pick them and move them to the backup.</text>

				<config-key-list>
					<!-- CONFIG - ARCHIVE SECTION - ARCHIVE-ASYNC KEY -->
					<config-key id="archive-async">
						<text>Archive WAL segments asynchronously.  WAL segments will be copied to the local repo, then a process will be forked to compress the segment and transfer it to the remote repo if configured.  Control will be returned to <postgres/> as soon as the WAL segment is copied locally.</text>
						<example>y</example>
					</config-key>

					<!-- CONFIG - ARCHIVE SECTION - ARCHIVE-MAX-MB KEY -->
					<config-key id="archive-max-mb">
						<text>Limits the amount of archive log that will be written locally when <setting>archive-async=y</setting>.  After the limit is reached, the following will happen:
						<ol>
							<li>PgBackRest will notify Postgres that the archive was succesfully backed up, then DROP IT.</li>
							<li>An error will be logged to the console and also to the Postgres log.</li>
							<li>A stop file will be written in the lock directory and no more archive files will be backed up until it is removed.</li>
						</ol>
						If this occurs then the archive log stream will be interrupted and PITR will not be possible past that point.  A new backup will be required to regain full restore capability.

						The purpose of this feature is to prevent the log volume from filling up at which point Postgres will stop completely.  Better to lose the backup than have the database go down.

						To start normal archiving again you'll need to remove the stop file which will be located at <file>${repo-path}/lock/${stanza}-archive.stop</file> where <code>${repo-path}</code> is the path set in the <setting>general</setting> section, and <code>${stanza}</code> is the backup stanza.</text>

						<example>1024</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - RESTORE -->
			<config-section id="restore">
				<text>The <setting>restore</setting> section defines settings used for restoring backups.</text>

				<config-key-list>
					<!-- CONFIG - RESTORE SECTION - TABLESPACE KEY -->
					<config-key id="tablespace">
						<text>Defines whether tablespaces will be be restored into their original (or remapped) locations or stored directly under the <path>pg_tblspc</path> path.  Disabling this setting produces compact restores that are convenient for development, staging, etc.  Currently these restores cannot be backed up as <backrest/> expects only links in the <path>pg_tblspc</path> path. If no tablespaces are present this this setting has no effect.</text>
						<example>n</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - EXPIRE -->
			<config-section id="expire">
				<text>The <setting>expire</setting> section defines how long backups will be retained.  Expiration only occurs when the number of complete backups exceeds the allowed retention.  In other words, if full-retention is set to 2, then there must be 3 complete backups before the oldest will be expired.  Make sure you always have enough space for rentention + 1 backups.</text>

				<!-- CONFIG - RETENTION SECTION - FULL-RETENTION KEY -->
				<config-key-list>
					<config-key id="retention-full">
						<text>Number of full backups to keep.  When a full backup expires, all differential and incremental backups associated with the full backup will also expire.  When not defined then all full backups will be kept.</text>

						<example>2</example>
					</config-key>

					<!-- CONFIG - RETENTION SECTION - DIFFERENTIAL-RETENTION KEY -->
					<config-key id="retention-diff">
						<text>Number of differential backups to keep.  When a differential backup expires, all incremental backups associated with the differential backup will also expire.  When not defined all differential backups will be kept.</text>

						<example>3</example>
					</config-key>

					<!-- CONFIG - RETENTION SECTION - ARCHIVE-RETENTION-TYPE KEY -->
					<config-key id="retention-archive-type">
						<text>Type of backup to use for archive retention (full or differential).  If set to full, then PgBackRest will keep archive logs for the number of full backups defined by <setting>archive-retention</setting>.  If set to differential, then PgBackRest will keep archive logs for the number of differential backups defined by <setting>archive-retention</setting>.

						If not defined then archive logs will be kept indefinitely.  In general it is not useful to keep archive logs that are older than the oldest backup, but there may be reasons for doing so.</text>

						<example>diff</example>
					</config-key>

					<!-- CONFIG - RETENTION SECTION - ARCHIVE-RETENTION KEY -->
					<config-key id="retention-archive">
						<text>Number of backups worth of archive log to keep.</text>

						<example>2</example>
					</config-key>
				</config-key-list>
			</config-section>

			<!-- CONFIG - STANZA -->
			<config-section id="stanza">
				<text>A stanza defines a backup for a specific database.  The stanza section must define the base database path and host/user if the database is remote.  Also, any global configuration sections can be overridden to define stanza-specific settings.</text>

				<!-- CONFIG - RETENTION SECTION - HOST KEY -->
				<config-key-list>
					<config-key id="db-host">
						<text>Define the database host.  Used for backups where the database host is different from the backup host.</text>

						<example>db.domain.com</example>
					</config-key>

					<!-- CONFIG - RETENTION SECTION - USER KEY -->
					<config-key id="db-user">
						<text>Defines user account on the db host when <setting>db-host</setting> is defined.</text>

						<example>postgres</example>
					</config-key>

					<!-- CONFIG - RETENTION SECTION - PATH KEY -->
					<config-key id="db-path">
						<text>Path to the db data directory (data_directory setting in postgresql.conf).</text>

						<example>/data/db</example>
					</config-key>
				</config-key-list>
			</config-section>
		</config-section-list>
	</config>

	<release title="Release Notes">
		<release-version-list>
			<release-version version="0.75" title="IN DEVELOPMENT: enterprise features: monitoring, throttling, retention period">
				<release-feature-bullet-list>
					<release-feature>
						<text>Fixed an issue where archive-copy would fail on an incr/diff backup when hardlink=n.  In this case the pg_xlog path does not already exist and must be created.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.65" title="Improved resume and restore logging, compact restores">
				<release-feature-bullet-list>
					<release-feature>
						<text>Better resume support.  Resumed files are checked to be sure they have not been modified and the manifest is saved more often to preserve checksums as the backup progresses.  More unit tests to verify each resume case.</text>
					</release-feature>
					<release-feature>
						<text>Resume is now optional.  Use the <setting>resume</setting> setting or <param>--no-resume</param> from the command line to disable.</text>
					</release-feature>
					<release-feature>
						<text>More info messages during restore.  Previously, most of the restore messages were debug level so not a lot was output in the log.</text>
					</release-feature>
					<release-feature>
						<text>Fixed an issue where an absolute path was not written into recovery.conf when the restore was run with a relative path.</text>
					</release-feature>
					<release-feature>
						<text>Added <setting>tablespace</setting> setting to allow tablespaces to be restored into the <path>pg_tblspc</path> path.  This produces compact restores that are convenient for development, staging, etc.  Currently these restores cannot be backed up as <backrest/> expects only links in the <path>pg_tblspc</path> path.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.61" title="Bug fix for uncompressed remote destination">
				<release-feature-bullet-list>
					<release-feature>
						<text>Fixed a buffering error that could occur on large, highly-compressible files when copying to an uncompressed remote destination.  The error was detected in the decompression code and resulted in a failed backup rather than corruption so it should not affect successful backups made with previous versions.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.60" title="Better version support and WAL improvements">
				<release-feature-bullet-list>
					<release-feature>
						<text>Pushing duplicate WAL now generates an error.  This worked before only if checksums were disabled.</text>
					</release-feature>
					<release-feature>
						<text>Database System IDs are used to make sure that all WAL in an archive matches up.  This should help prevent misconfigurations that send WAL from multiple clusters to the same archive.</text>
					</release-feature>
					<release-feature>
						<text>Regression tests working back to <postgres/> 8.3.</text>
					</release-feature>
					<release-feature>
						<text>Improved threading model by starting threads early and terminating them late.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.50" title="Restore and much more">
				<release-feature-bullet-list>
					<release-feature>
						<text>Added restore functionality.</text>
					</release-feature>
					<release-feature>
						<text>All options can now be set on the command-line making pg_backrest.conf optional.</text>
					</release-feature>
					<release-feature>
						<text>De/compression is now performed without threads and checksum/size is calculated in stream.  That means file checksums are no longer optional.</text>
					</release-feature>
					<release-feature>
						<text>Added option <param>--no-start-stop</param> to allow backups when Postgres is shut down.  If <file>postmaster.pid</file> is present then <param>--force</param> is required to make the backup run (though if Postgres is running an inconsistent backup will likely be created).  This option was added primarily for the purpose of unit testing, but there may be applications in the real world as well.</text>
					</release-feature>
					<release-feature>
						<text>Fixed broken checksums and now they work with normal and resumed backups.  Finally realized that checksums and checksum deltas should be functionally separated and this simplied a number of things.  Issue #28 has been created for checksum deltas.</text>
					</release-feature>
					<release-feature>
						<text>Fixed an issue where a backup could be resumed from an aborted backup that didn't have the same type and prior backup.</text>
					</release-feature>
					<release-feature>
						<text>Removed dependency on Moose.  It wasn't being used extensively and makes for longer startup times.</text>
					</release-feature>
					<release-feature>
						<text>Checksum for backup.manifest to detect corrupted/modified manifest.</text>
					</release-feature>
					<release-feature>
						<text>Link <path>latest</path> always points to the last backup.  This has been added for convenience and to make restores simpler.</text>
					</release-feature>
					<release-feature>
						<text>More comprehensive unit tests in all areas.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.30" title="Core Restructuring and Unit Tests">
				<release-feature-bullet-list>
					<release-feature>
						<text>Complete rewrite of BackRest::File module to use a custom protocol for remote operations and Perl native GZIP and SHA operations.  Compression is performed in threads rather than forked processes.</text>
					</release-feature>
					<release-feature>
						<text>Fairly comprehensive unit tests for all the basic operations.  More work to be done here for sure, but then there is always more work to be done on unit tests.</text>
					</release-feature>
					<release-feature>
						<text>Removed dependency on Storable and replaced with a custom ini file implementation.</text>
					</release-feature>
					<release-feature>
						<text>Added much needed documentation</text>
					</release-feature>
					<release-feature>
						<text>Numerous other changes that can only be identified with a diff.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.19" title="Improved Error Reporting/Handling">
				<release-feature-bullet-list>
					<release-feature>
						<text>Working on improving error handling in the file object.  This is not complete, but works well enough to find a few errors that have been causing us problems (notably, find is occasionally failing building the archive async manifest when system is under load).</text>
					</release-feature>
					<release-feature>
						<text>Found and squashed a nasty bug where <code>file_copy()</code> was defaulted to ignore errors.  There was also an issue in file_exists that was causing the test to fail when the file actually did exist.  Together they could have resulted in a corrupt backup with no errors, though it is very unlikely.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.18" title="Return Soft Error When Archive Missing">
				<release-feature-bullet-list>
					<release-feature>
						<text>The <param>archive-get</param> operation returns a 1 when the archive file is missing to differentiate from hard errors (ssh connection failure, file copy error, etc.)  This lets Postgres know that that the archive stream has terminated normally.  However, this does not take into account possible holes in the archive stream.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.17" title="Warn When Archive Directories Cannot Be Deleted">
				<release-feature-bullet-list>
					<release-feature>
						<text>If an archive directory which should be empty could not be deleted backrest was throwing an error.  There's a good fix for that coming, but for the time being it has been changed to a warning so processing can continue.  This was impacting backups as sometimes the final archive file would not get pushed if the first archive file had been in a different directory (plus some bad luck).</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.16" title="RequestTTY=yes for SSH Sessions">
				<release-feature-bullet-list>
					<release-feature>
						<text>Added <setting>RequestTTY=yes</setting> to ssh sesssions.  Hoping this will prevent random lockups.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.15" title="RequestTTY=yes for SSH Sessions">
				<release-feature-bullet-list>
					<release-feature>
						<text>Added archive-get functionality to aid in restores.</text>
					</release-feature>
					<release-feature>
						<text>Added option to force a checkpoint when starting the backup <setting>start-fast=y</setting>.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.11" title="Minor Fixes">
				<release-feature-bullet-list>
					<release-feature>
						<text>Removed <setting>master_stderr_discard</setting> option on database SSH connections.  There have been occasional lockups and they could be related to issues originally seen in the file code.</text>
					</release-feature>
					<release-feature>
						<text>Changed lock file conflicts on backup and expire commands to ERROR.  They were set to DEBUG due to a copy-and-paste from the archive locks.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>

			<release-version version="0.10" title="Backup and Archiving are Functional">
				<release-feature-bullet-list>
					<release-feature>
						<text>No restore functionality, but the backup directories are consistent Postgres data directories.  You'll need to either uncompress the files or turn off compression in the backup.  Uncompressed backups on a ZFS (or similar) filesystem are a good option because backups can be restored locally via a snapshot to create logical backups or do spot data recovery.</text>
					</release-feature>
					<release-feature>
						<text>Archiving is single-threaded.  This has not posed an issue on our multi-terabyte databases with heavy write volume.  Recommend a large WAL volume or to use the async option with a large volume nearby.</text>
					</release-feature>
					<release-feature>
						<text>Backups are multi-threaded, but the Net::OpenSSH library does not appear to be 100% threadsafe so it will very occasionally lock up on a thread.  There is an overall process timeout that resolves this issue by killing the process.  Yes, very ugly.</text>
					</release-feature>
					<release-feature>
						<text>Checksums are lost on any resumed backup. Only the final backup will record checksum on multiple resumes.  Checksums from previous backups are correctly recorded and a full backup will reset everything.</text>
					</release-feature>
					<release-feature>
						<text>The backup.manifest is being written as Storable because Config::IniFile does not seem to handle large files well.  Would definitely like to save these as human-readable text.</text>
					</release-feature>
					<release-feature>
						<text>Absolutely no documentation (outside the code).  Well, excepting these release notes.</text>
					</release-feature>
				</release-feature-bullet-list>
			</release-version>
		</release-version-list>
	</release>

	<recognition title="Recognition">
		<text>Primary recognition goes to Stephen Frost for all his valuable advice and criticism during the development of <backrest/>.

			Resonate (http://www.resonate.com/) also contributed to the development of PgBackRest and allowed me to install early (but well tested) versions as their primary Postgres backup solution.</text>
	</recognition>
</doc>
